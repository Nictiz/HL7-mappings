<?xml version="1.0" encoding="UTF-8"?>
<!-- Apache ANT build file that sets up (target = setup) or by default converts transaction with references to full ada xml (target = resolve-refs)
    Apache ANT is based on Java and may be found here: https://ant.apache.org/
    run on command line or from a batch file: 
        ant [-f build.xml] [target]
        
    If you just run ant, it expects a build.xml in the working dir and runs the default target.
-->
<project basedir="." name="build-ada2hl7-include" xmlns:if="ant:if" xmlns:unless="ant:unless">
    <!-- Skip ivy with ant -Drun-ivy=false -->
    <property name="run-ivy" value="true"/>
    
    <property name="xsl.saxon" value="${saxon.path}"/>
    <property name="xsl.saxon.class" value="net.sf.saxon.TransformerFactoryImpl"/>

    <property name="echo.label.in" value="ADA"/>
    <property name="echo.label.out" value="HL7"/>

    <property name="echo.label" value="${echo.label.in} to ${echo.label.out}"/>
    <property name="project.author" value="Nictiz"/>
    <property name="project.website" value="http://www.nictiz.nl/"/>
    <property name="project.status" value="beta"/>
    <property name="project.license" value="GNU-LGPL"/>
    <property name="project.copyright" value="true"/>
    <property name="project.description" value="Contains all relevant materials to convert valid ${echo.label.in} instances for ${is.name} to  ${echo.label.out}"/>
    <property name="project.prefix" value="${is.abbreviation}_${is.version}"/>

    <property name="dummy.output.dir" value="../../dummy"/>
    
    <target name="run-ivy" if="${run-ivy}">
        <ant antfile="${basedir}/../../../../../_ant-buildfiles/ant-include/ant.ivy.xml" inheritall="true" usenativebasedir="true"/>
    </target>
    
    <target name="setup_sub" description="Setup ${build.dir}/${usecase} containing the new/schemas folder from the original ADA project and refreshed ada instances from test_xslt">

        <antcall target="setup_sub_schemas">
            <param name="schema.string" value="*${usecase}.xsd"/>
        </antcall>

        <antcall target="setup_sub_instances">
            <param name="fileset.dir" value="${fileset.dir}"/>
            <param name="fileset.include" value="${fileset.include}"/>
            <param name="refs.ada.dir" value="${refs.ada.dir}"/>
            <param name="usecase" value="${usecase}"/>
        </antcall>

    </target>

    <target name="setup_sub_schemas" description="Setup ${build.dir}/${usecase} containing the new/schemas folder from the original ADA project: ${ada.project.source.dir}/schemas">
        <echo/>
        <echo>Setup ${build.dir}/${usecase} containing refreshed ada schemas (${schema.string}) containing the new/schemas folder from the original ADA project: ${ada.project.source.dir}/schemas</echo>

        <mkdir dir="${build.dir}/${usecase}/ada_schemas"/>
        <delete>
            <fileset dir="${build.dir}/${usecase}/ada_schemas" includes="*.xsd"/>
        </delete>

        <copy todir="${build.dir}/${usecase}/ada_schemas" failonerror="true">
            <fileset dir="${ada.project.source.dir}/schemas">
                <include name="${schema.string}"/>
                <include name="ada_meta.xsd"/>
            </fileset>
        </copy>

    </target>

    <target name="setup_sub_instances" description="Setup ${build.dir}/${usecase} containing refreshed ada production instances (${fileset.dir}/${fileset.include})">

        <echo/>
        <echo>Setup ${build.dir}/${usecase} containing refreshed ada production instances (${fileset.include})</echo>

        <mkdir dir="${build.dir}/${usecase}/${fileset.dir}"/>
        <delete>
            <fileset dir="${build.dir}/${usecase}/${fileset.dir}" includes="${fileset.include}"/>
        </delete>
        <copy todir="${build.dir}/${usecase}/${fileset.dir}" failonerror="true">
            <fileset dir="${refs.dir}/${usecase}/${refs.ada.dir}">
                <include name="${fileset.include}"/>
            </fileset>
        </copy>

    </target>
    
    <!-- validates xml using xsd -->
    <target name="schemavalidate_hl7_sub">
        
        <fileset id="inputfiles.validate" dir="${build.dir}">
            <include name="${fileset.include}"/>
            <exclude name="${fileset.exclude}" if="fileset.exclude"/>
        </fileset>
        
        <echo/>
        <echo>${echo.label} validate schema with input files ${fileset.include} but excluding ${fileset.exclude}  and schema ${validate.schema}</echo>
        <schemavalidate warn="true" failonerror="false">
            <fileset refid="inputfiles.validate"/>
            <schema namespace="urn:hl7-org:v3" file="${validate.schema}"/>
        </schemavalidate>
        
    </target>
    
    <target name="schematronresults_sub">
        
        <echo/>
        <echo>${echo.label} ${xsl.validate.svrl} make recap of validation in ${result.xml}</echo>
        <xslt force="true" style="${xsl.validate.svrl}" in="${xsl.validate.svrl}" out="${result.xml}">
            <factory name="${xsl.saxon.class}"/>
            <classpath location="${xsl.saxon}"/>
            <param name="inputDir" expression="${input.dir}"/>
            <param name="inputFileSet" expression="${input.fileset}"/>
        </xslt>
        
    </target>
    
    <target name="validate_hl7_sub">
        <echo>Deleting previous results, if any</echo>
        <mkdir dir="${sub.build.dir}/${xsl.output}"/>
        <delete>
            <fileset dir="${sub.build.dir}/${xsl.output}" includes="*.xml"/>
        </delete>
        
        <fileset id="inputfilesMP" dir="${sub.build.dir}/${xsl.input}" includes="*.xml"/>
        
        <echo/>
        <echo>${echo.label} ${xsl.mp} input dir ${sub.build.dir}/${xsl.input}</echo>
        <xslt force="true" style="${xsl.mp}" destdir="${sub.build.dir}/${xsl.output}" extension=".xml" useImplicitFileset="false">
            <fileset refid="inputfilesMP"/>
            <factory name="${xsl.saxon.class}"/>
            <classpath location="${xsl.saxon}"/>
        </xslt>
    </target>

</project>
